name: Weather Data Logger CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Secrets (Check If They Exist)
        run: |
          echo "MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}"
          echo "MYSQL_PASSWORD: (hidden)"

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Wait for MySQL to be Ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..60}; do
            if mysqladmin ping -h127.0.0.1 -uroot -p"${{ secrets.MYSQL_PASSWORD }}" --silent; then
              echo "‚úÖ MySQL is up and running!"
              break
            fi
            echo "‚è≥ Waiting for MySQL... ($i/60)"
            sleep 2
          done

      - name: Verify MySQL Connection
        run: |
          mysql -h 127.0.0.1 -uroot -p"${{ secrets.MYSQL_PASSWORD }}" -e "SHOW DATABASES;"

      - name: Build with Maven
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/${{ secrets.MYSQL_DATABASE }}?allowPublicKeyRetrieval=true&useSSL=false
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: mvn clean package -DskipTests

      - name: Run Tests
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/${{ secrets.MYSQL_DATABASE_TEST }}?allowPublicKeyRetrieval=true&useSSL=false
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: mvn test

      - name: Upload Artifact (JAR file)
        uses: actions/upload-artifact@v4
        with:
          name: weather-app-artifact  # ‚úÖ Ensure this matches in restore step
          path: target/

  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Built Artifact
        uses: actions/download-artifact@v4
        with:
          name: weather-app-artifact  # ‚úÖ Must match upload step
          path: target  # ‚úÖ Ensures all JAR files are placed in `target/`

      - name: Verify JAR File Exists
        run: |
          ls -lh target/*.jar || echo "‚ùå No JAR file found!"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/weather-app:latest .

      - name: Push to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/weather-app:latest
  
  

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "üîÑ Stopping existing containers..."
            docker stop weather-app || true
            docker rm weather-app || true
            docker stop weather-mysql || true
            docker rm weather-mysql || true

            echo "üì• Pulling latest images..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/weather-app:latest

            echo "üîß Creating network..."
            docker network create weather-network || true

            echo "üì¶ Starting MySQL..."
            docker run -d --name weather-mysql \
              --network=weather-network \
              -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -e MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
              -p 3306:3306 \
              mysql:8

            sleep 20  # Give MySQL time to start

            echo "üöÄ Starting Application..."
            docker run -d --name weather-app \
              --network=weather-network \
              -p 6161:6161 \
              -e SPRING_DATASOURCE_URL="jdbc:mysql://weather-mysql:3306/${{ secrets.MYSQL_DATABASE }}?allowPublicKeyRetrieval=true&useSSL=false" \
              -e SPRING_DATASOURCE_USERNAME=root \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
              ${{ secrets.DOCKER_USERNAME }}/weather-app:latest

            echo "‚úÖ Deployment Successful!"
